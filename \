/***********************************************************
 CSCI 466 - Assignment 12 - Spring 2018
 
 Progammer: Sam Piecz
 Z-ID: Z1732715
 Section: 3
 TA: Raj 
 Date Due: May 04, 2018 
 Purpose: Use mysql & c++. 
 ************************************************************/
#include <iostream>
#include <mysql.h>
using namespace std;

/***************************************************************
  
 Name: 

 Use: 

 Parameters: 

 Returns: 

 ***************************************************************/
int main( int argc, char** argv )
{
    // Initialize MySQL library
    int mysql_library_init(int argc, char** argv, char** groups);

    // Initializes and allocates memoery to a MYSQL object
    MYSQL *mysql_init(MYSQL *mysql);

    // Establish connection
    MYSQL *mysql_real_connect(MYSQL *mysql, const char *host,
            const char *user, const char *passwd,
            const char *db, unsigned int port,
            const char *unix_socket, unsigned long client_flag);

    // Execute SQL statement stored in string
    int mysql_query(MYSQL *mysql, const char* stmt_str);
    // The only difference between this command and the one above
    // is the use of length as opposed to a terminating null character.
    // THis allows binary data which may contain null characters as valid data to be sent.
    int mysql_real_query(MYSQL *mysql,
            const char *stmt_str,
            unsigned long length);

    // mysql_num_rows()
    // unsigned int mysql_field_count(MYSWL *mysql)
    // my_ulonglong mysql_insert_id(MYSWL *mysql)
    // How many rows were affected
    // my_ulonglong mysql_affected_rows(MYSQL *mysql)
    //
    // Retreive data from a result set
    // mysql_store_result() is same as PDOStatement::fetchAll()
    // mysql_use_result() is same as PDOStatement::fetch()
    //
    // After using the above two commands I have to use
    // mysql_fetch_row()
    //
    // After all that, free up memory with mysql_free_result()
    //
    // Can also download all rows of result set
    MYSQL_RES *mysql_store_result(MYSQL *mysql)
    // MYSQL_RES *mysql_fetch_row(MYSQL_RES *result)
    // mysql_row_seek()
    // MYSQL *mysql_use_result(MYSQL *mysql)
    //
    // Get byte lengths for field in row
    // unsigned long *mysql_fetch_lengths(MYSQL_RES *result)
    //
    //

    // Close previously opened connection
    void mysql_close(MYSQL, *mysql);

    // Call to clean up memory after use of MySQL library
    void mysql_library_end(void);
}
